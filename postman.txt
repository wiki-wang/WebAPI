Postman
	--针对RESTful 接口的测试
	--号称是 使用最广泛的REST API
	--不仅仅是测试工具，API开发支持
		--构建API
		--Mock Server
		--开发文档自动生成
		
		我们主要是模拟客户端，对服务端进行测试。
	
	collection
		--分类管理
		
	构建HTTP请求：
		包括请求方法，请求url，请求参数，请求头，请求消息体，自动化设置包括检查脚本
	
	postman，只要是http请求，都可以测试，不一定非要基于web api的请求。
	
构建HTTP请求：
	--API测试，重中之重，就是构建HTTP请求
	主要包括：
		--Method（请求方法）
		--url
			--如果是http协议，可以不写协议
			--如果是https协议，则要写协议
				--如果是https，可能提示无响应
					settings - generel -ssl cetificate verification 不勾选，即认为访问的页面是合法的，不做验证。
			--url参数
				url中，？后面的内容，就是url参数，即query string。这些参数用&符号隔开，等号前面是参数名，后面是参数值。参数的次序一般来说无所谓。
				如果参数的值中包含特殊字符，如&，可以写在params表格中，postman会自动转义，转义的方法为%加上字符的ascii码值。
				
			--请求参数具体怎么写，是由接口文档来的。由开发人员提供。
		
		--请求头
			--有的HTTP请求需要特殊的请求头
			--需要在HTTP请求中，构建特殊的头部字段，比如cookie字段，每次进行HTTP请求时需要提供session-id，这个session-id就放在cookie中，进行http请求时，只有提供了这个字段，才能告诉浏览器这个用户是合法登录的，因为他有合法的session-id。
			
			--在哪里填请求头？
			params下面的表中，有个headers。
		
		--消息体
			--通常post、put、delete这些会把消息放在消息体中
			
			--消息体中携带的是额外的信息。
			
		为什么有的放在url中，有的放在消息体中？
			--因为通常url的长度是由限制的，但是消息体中没有长度限制。通常post的消息比较长，放在消息体重，这也是一种习惯。
			
			--在消息体里传送数据，要注意，消息体里的数据是有格式的。
				--url里的参数也有格式，但是这个格式是固定的。都是用&隔开，等号前面是参数名，后面是参数值。
				
				--消息体里的参数有各种格式，这个由接口文档，即接口的设计者所规定的，目前来讲，RESTAPI有三种最常见的消息格式：
					--application/x-www-form-urlencoded
						--格式类型：
							参数名=参数值&参数名=参数值，这个和url里面的参数形式是一样的。

							通过抓包，可以看到Content-Type里面，就是form-urlencoded
							
							%7B {
							%22 引号“
							
						通常用于登录、注册、传输用户名密码这类，也称作表单格式。
						
						用fidder抓包的时候，如果是转码的格式，想看到实际的内容，点击webform按钮
						
						postman中，如果在body里面选择了form-urlencoded，head中会自动添加Content-Type=form-urlencoded字段。
						
					--application/json
						数据在互联网上传输，都是一个一个字节的方式传输的。如果是字典类型的对象，也需要转换成字节串的方式传输。
						把一个数据对象变成一个字节串的形式，这个术语，就叫做序列化，方便 传输和保存。
						
						如果是xml格式的字符串，序列化的效率会比较低，因为多出了很多的标签。
						
						这时候就出现了一种新的数据格式，json。
						
						json和python字典的区别：
							python可以用单引号，也可以用双引号；最后一个元素可以加逗号
							json只能用双引号，最后一个元素不能有逗号
							
							二者只是看起来像，但是python 中的字典在内存中的存储并不是这样的。而json是一个字符串。
							
						在postman中，
						--选择body/raw, 
							-- 表示原始的数据格式
						--text/json
							--表示格式是json
						此时，head里面会自动加入Content-Type=Json。也可以自己在头里面写。
						
					-application/xml
						构建方式和json一样。
						text里面选择的内容，是帮助构建Content-TYpe的，省的自己写。
						
						
							
						对于消息体来说，写text/xml和application/xml是没有区别的。postman以实际写的为准。这里选择是为了帮助构建一个Content-Type头，省的写。对于接口来说，通常是application/xml。对于同步的请求，是text/xml。
						
						Content-TYpe，HTTP请求头里面的字段，用来描述消息体的格式。
						
				--同步请求和异步请求：
					属于前端。
						同步请求：等页面的所有请求全部发完，才会发送另一个请求。页面上不停的转，就是同步请求，页面上还有些资源没有加载完成。
						
						异步请求是不等的，同步要等。异步在F12 xhr页签中。
				选择哪一种数据格式，是由开发人员设计的。
				
				--通常来说，如果参数比较简单，会选择form-urlencoded。
				
			--form-data 选项
				也是键值对，但是和 www-form-urlencoded是有区别的。
				通过抓包可以看到，参数之间使用分割线隔开的。
				接口测试一般很少用到。
			--binary 选项
				把要传输的数据放在二进制文件中，传输整个文件。
				接口测试一般很少用。
				
				--如果数据比较复杂，通常选择json或者xml。但是目前json越来越流行了，因为它的效率更高。
--collection
	把请求消息分类存放。
	collection和folder
		collec是一个顶级的folder。
		通常，测试一个产品，或者一个大类的api，要建一个collection.子功能作为cocllection下面的文件夹。每个请求，可以根据功能命名，另存为，保存在各个文件夹下。
		
--导出
	导出命名的时候，可以加上日期。
	导入

--同步功能
	登录账号即可自动同步
	
	
--接口测试的流程
	--阅读API接口文档
	--编写测试用例
		--等价类，边界值，错误经验法等，012法则？
		--参数如果没有给长度限制，需要给出最大长度和最小长度
	--根据测试用例进行API的手工测试
	--一定要有文档。文档是依据。凭什么判断接口是不是正确的，就要依据接口文档。拿到接口文档，需要看有没有遗漏和矛盾的地方。接口文档也需要评审。
		
	
