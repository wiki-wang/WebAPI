HTTP协议
	--超文本传输（传输）协议
	--最初发明它是用来在浏览器和web服务器之间传输超文本信息的
	--在七层中，并不属于传输层，传输层主要是tcp和udp，http属于应用层
	--在浏览器和服务器之间进行传输，近几年，非web应用，移动应用，也会用http作为底层的传输协议。

	--版本：0.9 1.0 1.1 2
		--目前最广发使用的是HTTP/1.1

	--区别：
		HTTP 2支持服务端发起的请求
		HTTP1加入了长连接
	
	--HTTP和HTML
		浏览器一打开的时候，浏览器作为客户端，就会发送HTTP请求给服务端，发给百度的服务器。发送完请求后，百度服务器会返回HTTP响应，响应的时候会带上一个文件信息，此文件以HTML格式来存储的。
		HTTP是传输的一种方式，规定了客户端和服务端之间怎么进行通信。而传输的信息是什么呢？HTML就是传输的信息。百度服务器返回的内容就是以HTML格式来存储的。
		
		--比方：
		快递买的手机是HTML，怎么包装、怎么运输就是HTTP。
		HTTP是传送的方法，HTML是传送的内容中的一种。
	
--HTTP消息组成：
	--包含请求和响应
		--HTTP请求：
			--请求行
				HTTP请求第一行的内容，表示要操作什么资源。
				使用什么协议（--HTTP1.1），请求的方法（get、post...）
				
				去掉了主机名的URL地址，或者说路径，主机名放在请求头的Host中
				
				例子：
				GET /index.html HTTP/1.1
					--要获取的资源为index.html,使用的是HTTP1.1协议
				
				POST / HTTP/1.1
					--POST表示要提交信息，往 / 提交，使用的是HTTP1.1的协议
					
			--请求头
				--紧跟在请求行下面的部分
					--例如：
					Host:foo.com					Content-Type:application/x-www-form-unlencoded
					Content-Length:13
				--请求头可以有多个
				--请求头是键值对
				
			二者区别：
				请求行：
						--第一行，要干的事情
				请求头：
						--要干的事情的具体的信息
						--每一个请求头都包含名字和值。
						名字： Host 值是foo.com
						名字： Content-Type 值是application-...
						名字： Content-Length 值 13
					
				
			--空行
			--消息体
				--并不是所有的请求都有消息体。
				--get请求就没有消息体。
				--如果有消息体，消息体和请求头中间要空一行。即空行。
				
HTTP请求方法：
	请求方法很多，常用的如下：
		--GET:通常用来获取Request-URL所标志的资源信息。
			客户端从服务端获取网页的资源数据。
		
		--POST：提交/增加新的数据。增加。创建新的资源。会附带消息体。
		
		--HEAD：请求获取由Request-URL所标识的资源的响应消息报头
		
		--PUT：更新资源的部分信息。修改。
			--如果是更新资源的部分信息，根据RESTful规范，应该用PUT请求。
			但是，并不是不用PUT就不能实现。
			
		--DELETE：删除资源。具体的数据，有时候可能没写在消息体中，写在url中，这也是一种实现方式。
		
		--增加： post 修改：put 删除：delete 查询：get
	
请求的URL：
	--HTTP请求的URL，通常会去掉主机名，主机名放在请求头的HOST里面。
	--URL表示你要访问的资源的地址。类似于门牌号。
		例如：GET /index.html HTTP/1.1
		Host:www.example.com
	--目前用到的版本基本 都是1.1

请求头：
	--通常用来包含请求的其它信息，每一项都包含请求头的名字和值。
		--Host：指定主机名或者域名、ip地址
		--Content-Type：请求如果有消息体的话，消息体的格式是什么，常见的有x-www-form-unlencoded,json,xml格式
		
		--ContentLengh：请求消息体的长度是多少个字节
		
		--请求头：携带参数的一种方式。

消息体：
		需要请求消息体，常见的有put，post，delete等。
		get通常不需要消息体。
			--因为消息体通常用来存放比较大的信息。get一般不需要特别大的信息，如果需要参数的话，往往放在url中就够了。
			而post和put要提交信息，有时会放一些特别大的信息，这个时候就要放在消息体中，因为url有长度限制。

HTTP响应
	--包含：
		--状态行
			对应请求行
			
		--响应头
			对应请求头
			
		--空行
		--消息体
		
	--状态行和响应头肯定会有，消息体可能有也可能没有
	
	例子：
	HTTP/1.1 200 OK   #状态行
		Date: Mon, 23 May 2005 ...     #以下：响应头
		Content-Type: text/html; charset=UTF-8
		Content-Encoding:UTF-8
		Content-Length: 138
		Last-Modified: Wed, 08 Jan 2003 ...
		Server:...
		ETag:...
		Accept-Ranges:bytes
		Connection:close
	
		<html>		#以下：消息体
		<head>
		<body>
		</body>
		</head>
		</html>
	--状态行：
		包含协议的版本号，数字 200(状态码)，描述状态的短语（ok）
			--状态码：发送请求给服务端后，服务端返回，这次响应是一个什么样的结果：
				--是成功还是不成功：
					--成功：是什么样的一种成功
					--不成功：是什么样的一种不成功
				
			--状态码以第一个数字来区别。1-5
				1**：HTTP请求已经被服务端接受，需要继续处理，服务端给与一个临时响应
				
				2**：常见
					表示请求成功被服务端接受、理解、处理。
					200 OK 请求已经成功处理。
				3**：重定向
					--
					301：永久移动
					
					302：临时重定向
					跑到新的页面去。
					新的地址，在响应头的location字段中。
				
				4**：错误
					--客户端的错误
					400：明显的客户端错误，比如格式不对
					401：未认证
					403：服务器理解请求，但是决绝执行它，权限不够。
					
					404：找不到资源
				
				5**：服务器内部错误
					500：服务端遇到错误，但是之前没有代码处理这种错误，没有捕获，直接暴露出来了。
						如果接口测试过程中出现了这个问题，一定是bug。
						
					503：service unavailable
						常用语性能测试，超过服务器负载的时候，服务器处理不过来，会报这个错误。
					
					通常只要500开头，一定是问题。
响应头：
	--与请求头作用类似，包括响应的编码，长度等，提供额外的信息。
					
消息体：	
	--对于请求的信息，服务器在响应时，在消息体中返回。


	
抓包：
	--把测试工具和被测系统之间交互的HTTP请求抓取出来，抓抓包的目的是为了 出现问题时，查看具体的HTTP请求的内容， 看问题出现在哪里。
	
	浏览器抓的包不是原始的HTTP包。
	
	原理：
		把抓包工具作为一个proxy代理，处于客户端和服务端之间。

Fiddler:
	--点击XX，清除所有的记录
	--tools/options  查看缺省端口：8888，绑定本机上任何可用8888的IP地址
	fiddler启动的时候，会把自己设置为系统代理
	浏览器也要设置为使用这个代理
	查看：
		点击左侧某一个报文，右边点击inspector，上面是请求，下面是响应
		raw：原始的http请求和响应
	
	filters：
		use filters：勾选，使用过滤器 
					必须满足的：show only if URL contains
					
					192.168.1.101
	
	
					
		
				