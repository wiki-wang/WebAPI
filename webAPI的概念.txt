各种术语
	--接口
	--Web服务
	--API
	--WebAPI
	--REST API
	--SOAP
	
什么是接口
	--接口是某个对象 和外界交互的部分 
	--应用程序可能有很多接口
		**--用户界面UI
		**--消息交互接口
			--diameter,radius --socket tcp
			--基于soap的web service --HTTP
			--REST API --HTTP
		**--编程接口 --sdk开发包（软件 开发 工具包）
		--其它接口
			--数据服务产品:sql语言操作接口
			--对账系统：FTP文件接口
		--基于HTTP协议的接口，叫做web api接口
		application programming interface
		--web api接口，都是基于http协议。

通常所说的接口
				--REST API接口/WEB API接口

Web服务接口
	--互联网产品对外提供的服务接口，通常称为
		Web 服务接口
		Web Service接口
		Weh API
	
	--前端和后端的交互，通过HTTP协议
	前端：客户端
	后端：服务端
	前端向后端发送请求，后端返回结果给前端，非常像编程语言中的函数调用，调用一个函数，返回结果。
	很多个函数的集合，做成库，就会被称作API的调用。所以很多时候web服务器的接口，也会被称为web api.
	
	--通常所说的web api测试，也就是大家常说的接口测试，简称接口测试。
	
	--web api不止是桌面端，也包括手机app的接口。
	
***WebAPI 接口主要包括两种类型：***
	--基于SOAP的web service接口
		2002年，w3c定义了一套Web Service架构（标准） 作为一个实现web service（注意两者大小写）的标准规范。
			--WSDL语言描述web service
			--用基于xml的SOAP协议 来封装消息
			--用HTTP协议传输消息
			
			--优点：
				--清晰没有歧义，用软件工具就可以定义出一个接口，甚至自动生成相应的代码
				
			--缺点：
				--比较复杂
				--消息体大，占用内存和带宽多。
			一开始推出受到众人追捧，但是实在非常复杂难懂，耗费大量时间精力去学习搞懂这个标准，以至于逐渐被人们抛弃。
			
	--REST 接口
		--Representational state transfer
		--它定义了一种网络应用软件的架构风格特性
			--风格特性：
				--SOAP 的Web Service：明确规定怎么做
				--REST：要达到什么效果，但是不给出具体的编码方式，必须使用什么字段等。比较松散、宽松。
		--具有这些风格特性的应用软件架构，可以称之为RESTful的软件架构。
		--REST并非设计规范，而是一种风格。
		--99%都是使用HTTP协议。
		--基于RESTful风格的接口
		--前后端的主要工作：对资源的查询、增加、修改、删除
	
W3C：
	-- 国际互联网标准化组织
	
WEB API 测试的常用方法：
	--POSTMAN、SOAP UI、Jmeter等工具
		--构建HTTP请求消息，接收HTTP响应消息
	--使用编程语言开发工具
		--用python，构建合适的HTTP请求，发给被测系统
	
Web API测试和Web UI测试的区别:
	--UI测试：
		和被测系统打交道的是人，不需要使用工具，会提供界面，直接进行操作
	
	--Web API测试：
		没有界面，必须通过工具和被测系统进行交互
	
--核心：
		构建HTTP请求消息发送给被测系统
		对收到的HTTP响应消息进行解析
	--一般学会了一种，其它的核心功能基本类似

--自己开发工具：
	--利用编程语言，如Python和一些库（如request）
	--构造HTTP请求消息，并且解析收到的HTTP响应消息，检查结果
	--这种方式更加适用于自动化，并且和自动化框架结合起来使用

--是不是拿到一个web系统，都要做接口（web API）测试呢？
	--关键在于：API接口是否直接暴露给外部系统
		--很多公司开发的软件系统是一个整体，它的前端（网页，手机app）和服务端之间交互的接口是一个内部接口，并不会在文档上告诉外部的客户，前端和后盾的系统是怎样的接口。这样的接口，就不是暴露给外部系统的。这种内部接口，往往拿不到接口文档。这一类的接口往往是开发人员自己测试。
		
		--测试人员往往进行的是系统测试，站在用户角度，测试的接口是外部接口，比如UI，测试的用户操作。
		
		--如果一定要对内部接口进行测试，一定要提供接口文档，否则没有测试依据，凭什么说什么样的是对的，什么样的测试是对的？
		
什么样的接口，是暴露给外部系统的接口呢？
	--比如：云服务系统，用户是其他公司
	
	--依据：使用这个接口的对象，是系统内部的其它模块，还是外部公司的产品。
	
	--通常，如果开发提供接口文档，就是外部接口；
	--不提供文档，就是内部接口。
		
		--对于内部接口，本质上其实是不用测试人员完成的，应该由编程人员完成。如果一定要做的话，这个属于灰盒测试，不是站在用户角度的黑盒测试。如果一定要做接口测试，必须要找开发拿到文档，以文档为依据。

	
