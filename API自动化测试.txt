做到什么样的测试叫做自动化测试？
	能够完成用例里面的所有测试
	每个用例的输入数据必须能够自动填入，
	每个用例的检查结果，必须可以用代码可以自动完成
	初始化、清除 功能
	
Postman 
	没有用例的概念
	数据可以通过 Pre-request-Script（js）填入
	Test：可以做结果检查
	没有 初始化、清除 功能
	
	适合：
		手工测试
		半自动化
	
套件：
	用例的集合
	
Postman加入自动化代码：
	自身包含了一个js代码执行环境（jre）
	
	在发送请求之前， 设置发送消息的代码
	postman.setEnvironmentvariable('timestampHeader', new Date()) （放在pre-script里面）
	
	Date() 获取系统当前的时间
	
	环境变量和全局变量同名时，优先使用环境变量
	
	验证响应消息的代码：
		test['消息体中应该有retcode'] = responseBody.has('retcode');
		test['消息体中应该有user_id'] = responseBody.has('user_id')
	
	执行流程：
		pre-request -- request --response -- testscript
		
python开发接口测试：
	工具做的事情：
		构建HTTP请求
		查看HTTP响应
	
	python库:
	内置库：httplib\urllib2
	第三方库：urllib3、requests、pyCurl
	
Python requests库
特点：


	如何看文档：
	1 查看是否有快速上手之类的模块，对大体功能有了解，方便快速用起来
	
	1 导入requests模块
		import requests
		
		requests,如果有系统代理，会缺省使用系统代理;fiddler会把自己设置为系统代理
	
	2
		requests.get('http://httpbin.org/get')
		# get方法，就是get请求
		
	
构建请求：
	method：
		request.get('http://httpbin.org/get')
		request.put('http://httpbin.org/get')
		request.post('http://httpbin.org/get')
	
	url：
		可以直接写在url后面
		reques.get('http://localhost/api/mgr/sq_mgr/?action=list_course&pagenum=1&pagesize=20')
		
		如果参数比较复杂，或者包含特殊的字符需要转码，可以把参数写在字典里面，调用的时候，作为参数params的值
			pl = {}
			request.get('http://',params=pl)
		这种做法，构建请求的时候，同样会放在url中去
	
	header：
		定义一个dict，传递给headers参数
		headers = {}
		request.get('http://',params = pl, headers = headers)
		
	body:
		常见的消息体格式：
			form-urlencoded、json、xml
			
			编码为表单形式的数据：urlencoded
				传递一个字典给data参数，不用额外地加一个Content-Type=www-form-urlencoded头部，会自动加一个头部进来。
				r = request.post('http://', data=payload)
				
				
			json：
				payload={}
				r = request.post('http://', json=payload)
				也不用加Content-Type=application/json的头部，因为在参数里面写了json=，会自动增加这个头
				
			xml：
				xml的内容放在一个字符串中，赋值给一个变量payload。
				也是传递给参数data。
				由于data不知道是什么类型，所以需要手动在头部增加Content-Type=application/xml的头部
			

接收响应：
	接收响应的对象，就是r
	r.text 就是响应的消息体内容，是一个字符串
	
	python中判断一个表达式，为真则通过，为假则抛出异常
	assert '"retcode": 0' in r.text
		这种做法对格式要求很严格，不利于灵活地检查结果
	
	r.json()
	# 以json格式显示，就可以显示可读的中文，否则是unicode格式。	
	
	retObj = r.json()
	print(retObj)
	把响应 消息体中的 字符串 转换成python中的字典对象
	json不是python的内置函数，是requests中的方法
	
	检查结果中是否有包含 你好 的课程
	
	例子：
		isGet = False
		for course in retObj['retlist']:
			if course['name'] == '你好':
				isGet = True
				break
		assert isGet
		
	
	把列出课程，添加课程等，做到函数里面，直接调用就可以了。
	
	打印内容，可以用pprint，打印格式更加清晰
	import pprint
		
		
****fiddler中过滤器对于host过滤，要写完整的主机名***
	消息体的内容：r.text
	
	
	
	api中的参数次序无关系
	
	消息体中data里面，为什么一定要用双引号，不能用单引号，跟json有什么关系呢？
	
		
